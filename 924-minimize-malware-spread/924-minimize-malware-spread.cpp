class Solution {
public:
    
    int dfs(vector<vector<int>> &graph, int curr, vector<bool> &visited, vector<int> &initial, int &infectedCount){
        
        visited[curr] = true;
        
        infectedCount += binary_search(initial.begin() , initial.end(), curr);
        
        int size = 1;
        
        for(int i = 0; i < graph.size(); i++){
            
            if(visited[i] or graph[curr][i] == 0)
                continue;
            
            size += dfs(graph, i, visited, initial, infectedCount);
        }
        
        return size;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        
        sort(begin(initial), end(initial));
        
        int n = graph.size();
        
        vector<bool> visited(n, false);
        
        int ans = -1;
        int currSize = 0;
        
        for(int i : initial){
            
            if(visited[i])
                continue;
            
            int infectedCount = 0;
            
            int size = dfs(graph , i, visited, initial, infectedCount);
           
            if(infectedCount == 1){
                
                if(size > currSize){
                    ans = i;
                    currSize = size;
                }
            }
        }
        
        if(ans == -1)
            return initial[0];
        
        return ans;
    }
};